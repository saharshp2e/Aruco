{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n\n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n//**********WORKING PLAY AUDIO THEN TAKE DETECTION**************** */\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [tutorialStarted, setTutorialStarted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/distilled_water.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().then(() => {\n//       setTutorialStarted(true); // Start camera feed after audio plays\n//     }).catch(err => {\n//       console.error(\"Audio play error:\", err);\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const video = videoRef.current;\n\n//       // Request access to the webcam\n//       navigator.mediaDevices.getUserMedia({ video: true })\n//         .then((stream) => {\n//           video.srcObject = stream;\n\n//           // Only call play() when the video is loaded\n//           video.onloadedmetadata = () => {\n//             video.play().catch(error => console.error(\"Error playing video:\", error));\n//           };\n//         })\n//         .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//       return () => {\n//         if (video.srcObject) {\n//           video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//         }\n//       };\n//     }\n//   }, [tutorialStarted]);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//       return () => clearInterval(interval);\n//     }\n//   }, [tutorialStarted]);\n\n//   return (\n//     <div>\n//       {!tutorialStarted && <button onClick={startTutorial}>Start Tutorial</button>}\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker with ID 0 is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {/* Display \"Completed\" when marker with ID 0 is detected */}\n//       {detected && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/voice1.mp3'));\n//   const completionAudioRef = useRef(new Audio('/completed.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().catch(err => console.error(\"Audio play error:\", err));\n//   };\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     if (completed) return; // Stop processing if completed\n\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         console.log(\"Response Data:\", response.data); // Log the entire response data\n\n//         // Handle the response\n//         const { detected, augmented_image, ids } = response.data;\n\n//         // Check if detection happened\n//         if (detected) {\n//           console.log('Detection is true');\n//           console.log('Detected IDs:', ids); // This should now log the detected IDs\n\n//           // Check if the detected marker is ID 0\n//           if (ids && ids.includes(0)) {\n//             setCompleted(true);\n//             console.log('Marker ID 0 detected');\n//             videoRef.current.srcObject.getTracks().forEach(track => track.stop()); // Pause camera stream\n//             completionAudioRef.current.play().catch(err => console.error(\"Completion audio play error:\", err));\n//           }\n//         }\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, [completed]);\n\n//   return (\n//     <div>\n//       <button onClick={startTutorial}>Start Tutorial</button>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const audioRefs = useRef([\n//     new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n//     new Audio('/voice2.mp3'), // Step 2: Show distilled water\n//     new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n//     // Add the rest of the steps here\n//     new Audio('/voice13.mp3'), // Step 13: Test completion message\n//   ]);\n\n//   useEffect(() => {\n//     // Play the first step's audio when the component is loaded\n//     audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n//     // Web camera initialization logic\n//     const video = videoRef.current;\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const processFrame = async () => {\n//     if (completed) return;  // Stop processing if test is complete\n\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n\n//     // Send frame to backend for ArUco detection\n//     canvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n//       try {\n//         const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n//         const { detected, ids } = response.data;\n\n//         if (detected && ids) {\n//           handleMarkerDetection(ids);\n//         }\n\n//         // Display processed frame (augmented) coming from backend\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n//         img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   const handleMarkerDetection = (ids) => {\n//     const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n//     if (ids.includes(expectedMarkerId)) {\n//       console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n//       // Move to the next step\n//       setCurrentStep(currentStep + 1);\n\n//       // Stop current audio and play the next\n//       if (currentStep < audioRefs.current.length) {\n//         audioRefs.current[currentStep].pause();\n//         audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n//       }\n\n//       // Mark test as completed when last step is done\n//       if (currentStep === audioRefs.current.length - 1) {\n//         setCompleted(true);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n//     return () => clearInterval(interval);\n//   }, [currentStep]);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const [detected, setDetected] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0); // Track the current step\n  const [tutorialStarted, setTutorialStarted] = useState(false); // Track if tutorial has started\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const audioRefs = useRef([new Audio('/voice1.mp3'),\n  // Step 1: Introduction to sulfate test\n  new Audio('/voice2.mp3'),\n  // Step 2: Show distilled water\n  new Audio('/voice3.mp3'),\n  // Step 3: Show test tube 1\n  // Add the rest of the steps here\n  new Audio('/voice13.mp3') // Step 13: Test completion message\n  ]);\n\n  // Function to start the tutorial when the button is clicked\n  const handleStartTutorial = () => {\n    setTutorialStarted(true);\n\n    // Play the first step's audio\n    audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n    // Initialize the camera feed\n    const video = videoRef.current;\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      video.srcObject = stream;\n      video.onloadedmetadata = () => {\n        video.play().catch(error => console.error(\"Error playing video:\", error));\n      };\n    }).catch(err => console.error(\"Error accessing webcam:\", err));\n  };\n\n  // Function to capture and process each frame\n  const processFrame = async () => {\n    if (completed || !tutorialStarted) return; // Stop processing if test is complete or tutorial not started\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height); // Draw the video frame on canvas\n\n    // Send frame to backend for ArUco detection\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n      try {\n        const response = await axios.post('http://localhost:5000/detect', formData, {\n          responseType: 'json'\n        });\n        const {\n          detected,\n          ids\n        } = response.data;\n        if (detected && ids) {\n          handleMarkerDetection(ids);\n        }\n\n        // Display processed frame (augmented) coming from backend\n        const img = new Image();\n        img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n        img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n      }\n    }, 'image/jpeg');\n  };\n\n  // Function to handle detected markers and play audio for the corresponding step\n  const handleMarkerDetection = ids => {\n    const expectedMarkerId = currentStep; // Assuming marker ID matches the current step\n    if (ids.includes(expectedMarkerId)) {\n      console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n      // Move to the next step\n      setCurrentStep(currentStep + 1);\n\n      // Stop current audio and play the next\n      if (currentStep < audioRefs.current.length) {\n        audioRefs.current[currentStep].pause();\n        audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n      }\n\n      // Mark test as completed when the last step is done\n      if (currentStep === audioRefs.current.length - 1) {\n        setCompleted(true);\n      }\n    }\n  };\n\n  // Continuously process frames at 10 FPS when tutorial has started\n  useEffect(() => {\n    let interval;\n    if (tutorialStarted) {\n      interval = setInterval(processFrame, 1000 / 10); // 10 FPS\n    }\n    return () => clearInterval(interval); // Clear interval on unmount\n  }, [tutorialStarted, currentStep]); // Add tutorialStarted as a dependency to start processing only when it is true\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sulfate Ion Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this), !tutorialStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartTutorial,\n      children: \"Start Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 9\n    }, this), tutorialStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"640\",\n        height: \"480\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), completed && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue',\n        marginTop: '10px'\n      },\n      children: \"Sulfate Ion Test Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 690,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraFeed, \"BrJB9XJ9uLg7D7hYlYcJu3ovmkk=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraFeed","_s","detected","setDetected","completed","setCompleted","currentStep","setCurrentStep","tutorialStarted","setTutorialStarted","videoRef","canvasRef","audioRefs","Audio","handleStartTutorial","current","play","catch","err","console","error","video","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadedmetadata","processFrame","canvas","context","getContext","drawImage","width","height","toBlob","blob","formData","FormData","append","response","post","responseType","ids","data","handleMarkerDetection","img","Image","src","augmented_image","onload","expectedMarkerId","includes","log","length","pause","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","style","display","color","marginTop","_c","$RefreshReg$"],"sources":["/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n  \n//   useEffect(() => {\n//     const video = videoRef.current;\n  \n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n  \n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n  \n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n    \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n    \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n        \n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n        \n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n  \n  \n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n//**********WORKING PLAY AUDIO THEN TAKE DETECTION**************** */\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [tutorialStarted, setTutorialStarted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/distilled_water.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().then(() => {\n//       setTutorialStarted(true); // Start camera feed after audio plays\n//     }).catch(err => {\n//       console.error(\"Audio play error:\", err);\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const video = videoRef.current;\n\n//       // Request access to the webcam\n//       navigator.mediaDevices.getUserMedia({ video: true })\n//         .then((stream) => {\n//           video.srcObject = stream;\n\n//           // Only call play() when the video is loaded\n//           video.onloadedmetadata = () => {\n//             video.play().catch(error => console.error(\"Error playing video:\", error));\n//           };\n//         })\n//         .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//       return () => {\n//         if (video.srcObject) {\n//           video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//         }\n//       };\n//     }\n//   }, [tutorialStarted]);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//       return () => clearInterval(interval);\n//     }\n//   }, [tutorialStarted]);\n\n//   return (\n//     <div>\n//       {!tutorialStarted && <button onClick={startTutorial}>Start Tutorial</button>}\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker with ID 0 is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {/* Display \"Completed\" when marker with ID 0 is detected */}\n//       {detected && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/voice1.mp3'));\n//   const completionAudioRef = useRef(new Audio('/completed.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().catch(err => console.error(\"Audio play error:\", err));\n//   };\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     if (completed) return; // Stop processing if completed\n  \n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n  \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n  \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n  \n//         console.log(\"Response Data:\", response.data); // Log the entire response data\n  \n//         // Handle the response\n//         const { detected, augmented_image, ids } = response.data;\n  \n//         // Check if detection happened\n//         if (detected) {\n//           console.log('Detection is true');\n//           console.log('Detected IDs:', ids); // This should now log the detected IDs\n        \n//           // Check if the detected marker is ID 0\n//           if (ids && ids.includes(0)) {\n//             setCompleted(true);\n//             console.log('Marker ID 0 detected');\n//             videoRef.current.srcObject.getTracks().forEach(track => track.stop()); // Pause camera stream\n//             completionAudioRef.current.play().catch(err => console.error(\"Completion audio play error:\", err));\n//           }\n//         }\n        \n  \n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n  \n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, [completed]);\n\n//   return (\n//     <div>\n//       <button onClick={startTutorial}>Start Tutorial</button>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const audioRefs = useRef([\n//     new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n//     new Audio('/voice2.mp3'), // Step 2: Show distilled water\n//     new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n//     // Add the rest of the steps here\n//     new Audio('/voice13.mp3'), // Step 13: Test completion message\n//   ]);\n\n//   useEffect(() => {\n//     // Play the first step's audio when the component is loaded\n//     audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n//     // Web camera initialization logic\n//     const video = videoRef.current;\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const processFrame = async () => {\n//     if (completed) return;  // Stop processing if test is complete\n\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n\n//     // Send frame to backend for ArUco detection\n//     canvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n//       try {\n//         const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n//         const { detected, ids } = response.data;\n\n//         if (detected && ids) {\n//           handleMarkerDetection(ids);\n//         }\n\n//         // Display processed frame (augmented) coming from backend\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n//         img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   const handleMarkerDetection = (ids) => {\n//     const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n//     if (ids.includes(expectedMarkerId)) {\n//       console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n//       // Move to the next step\n//       setCurrentStep(currentStep + 1);\n      \n//       // Stop current audio and play the next\n//       if (currentStep < audioRefs.current.length) {\n//         audioRefs.current[currentStep].pause();\n//         audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n//       }\n\n//       // Mark test as completed when last step is done\n//       if (currentStep === audioRefs.current.length - 1) {\n//         setCompleted(true);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n//     return () => clearInterval(interval);\n//   }, [currentStep]);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst CameraFeed = () => {\n  const [detected, setDetected] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n  const [tutorialStarted, setTutorialStarted] = useState(false);  // Track if tutorial has started\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const audioRefs = useRef([\n    new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n    new Audio('/voice2.mp3'), // Step 2: Show distilled water\n    new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n    // Add the rest of the steps here\n    new Audio('/voice13.mp3'), // Step 13: Test completion message\n  ]);\n\n  // Function to start the tutorial when the button is clicked\n  const handleStartTutorial = () => {\n    setTutorialStarted(true);\n\n    // Play the first step's audio\n    audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n    // Initialize the camera feed\n    const video = videoRef.current;\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n          video.play().catch(error => console.error(\"Error playing video:\", error));\n        };\n      })\n      .catch(err => console.error(\"Error accessing webcam:\", err));\n  };\n\n  // Function to capture and process each frame\n  const processFrame = async () => {\n    if (completed || !tutorialStarted) return;  // Stop processing if test is complete or tutorial not started\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);  // Draw the video frame on canvas\n\n    // Send frame to backend for ArUco detection\n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n      try {\n        const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n        const { detected, ids } = response.data;\n\n        if (detected && ids) {\n          handleMarkerDetection(ids);\n        }\n\n        // Display processed frame (augmented) coming from backend\n        const img = new Image();\n        img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n        img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n      }\n    }, 'image/jpeg');\n  };\n\n  // Function to handle detected markers and play audio for the corresponding step\n  const handleMarkerDetection = (ids) => {\n    const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n    if (ids.includes(expectedMarkerId)) {\n      console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n      // Move to the next step\n      setCurrentStep(currentStep + 1);\n\n      // Stop current audio and play the next\n      if (currentStep < audioRefs.current.length) {\n        audioRefs.current[currentStep].pause();\n        audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n      }\n\n      // Mark test as completed when the last step is done\n      if (currentStep === audioRefs.current.length - 1) {\n        setCompleted(true);\n      }\n    }\n  };\n\n  // Continuously process frames at 10 FPS when tutorial has started\n  useEffect(() => {\n    let interval;\n    if (tutorialStarted) {\n      interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n    }\n    return () => clearInterval(interval);  // Clear interval on unmount\n  }, [tutorialStarted, currentStep]);  // Add tutorialStarted as a dependency to start processing only when it is true\n\n  return (\n    <div>\n      <h1>Sulfate Ion Test</h1>\n\n      {/* Start Tutorial Button - visible only if the tutorial hasn't started */}\n      {!tutorialStarted && (\n        <button onClick={handleStartTutorial}>Start Tutorial</button>\n      )}\n\n      {/* Video and canvas for camera feed - only visible once the tutorial starts */}\n      {tutorialStarted && (\n        <>\n          <video ref={videoRef} style={{ display: 'none' }} />\n          <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n        </>\n      )}\n\n      {/* Display test completion message when the test is done */}\n      {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n    </div>\n  );\n};\n\nexport default CameraFeed;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;EACpD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EAChE,MAAMgB,QAAQ,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMkB,SAAS,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMmB,SAAS,GAAGnB,MAAM,CAAC,CACvB,IAAIoB,KAAK,CAAC,aAAa,CAAC;EAAE;EAC1B,IAAIA,KAAK,CAAC,aAAa,CAAC;EAAE;EAC1B,IAAIA,KAAK,CAAC,aAAa,CAAC;EAAE;EAC1B;EACA,IAAIA,KAAK,CAAC,cAAc,CAAC,CAAE;EAAA,CAC5B,CAAC;;EAEF;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCL,kBAAkB,CAAC,IAAI,CAAC;;IAExB;IACAG,SAAS,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAAC,CAAC;;IAEjF;IACA,MAAMG,KAAK,GAAGX,QAAQ,CAACK,OAAO;IAC9BO,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEH,KAAK,EAAE;IAAK,CAAC,CAAC,CACjDI,IAAI,CAAEC,MAAM,IAAK;MAChBL,KAAK,CAACM,SAAS,GAAGD,MAAM;MACxBL,KAAK,CAACO,gBAAgB,GAAG,MAAM;QAC7BP,KAAK,CAACL,IAAI,CAAC,CAAC,CAACC,KAAK,CAACG,KAAK,IAAID,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;MAC3E,CAAC;IACH,CAAC,CAAC,CACDH,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC,CAAC;EAChE,CAAC;;EAED;EACA,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIzB,SAAS,IAAI,CAACI,eAAe,EAAE,OAAO,CAAE;;IAE5C,MAAMsB,MAAM,GAAGnB,SAAS,CAACI,OAAO;IAChC,MAAMgB,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,SAAS,CAACvB,QAAQ,CAACK,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEe,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC,CAAC,CAAE;;IAEzE;IACAL,MAAM,CAACM,MAAM,CAAC,MAAOC,IAAI,IAAK;MAC5B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,EAAE,WAAW,CAAC;MAC3C,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAM9C,KAAK,CAAC+C,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;UAAEK,YAAY,EAAE;QAAO,CAAC,CAAC;QACrG,MAAM;UAAEzC,QAAQ;UAAE0C;QAAI,CAAC,GAAGH,QAAQ,CAACI,IAAI;QAEvC,IAAI3C,QAAQ,IAAI0C,GAAG,EAAE;UACnBE,qBAAqB,CAACF,GAAG,CAAC;QAC5B;;QAEA;QACA,MAAMG,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;QACvBD,GAAG,CAACE,GAAG,GAAG,0BAA0BR,QAAQ,CAACI,IAAI,CAACK,eAAe,EAAE;QACnEH,GAAG,CAACI,MAAM,GAAG,MAAMpB,OAAO,CAACE,SAAS,CAACc,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEjB,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;MAC9E,CAAC,CAAC,OAAOjB,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC/C;IACF,CAAC,EAAE,YAAY,CAAC;EAClB,CAAC;;EAED;EACA,MAAM4B,qBAAqB,GAAIF,GAAG,IAAK;IACrC,MAAMQ,gBAAgB,GAAG9C,WAAW,CAAC,CAAE;IACvC,IAAIsC,GAAG,CAACS,QAAQ,CAACD,gBAAgB,CAAC,EAAE;MAClCjC,OAAO,CAACmC,GAAG,CAAC,QAAQhD,WAAW,6BAA6B8C,gBAAgB,EAAE,CAAC;;MAE/E;MACA7C,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;;MAE/B;MACA,IAAIA,WAAW,GAAGM,SAAS,CAACG,OAAO,CAACwC,MAAM,EAAE;QAC1C3C,SAAS,CAACG,OAAO,CAACT,WAAW,CAAC,CAACkD,KAAK,CAAC,CAAC;QACtC5C,SAAS,CAACG,OAAO,CAACT,WAAW,GAAG,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAAC,CAAC;MACjG;;MAEA;MACA,IAAIZ,WAAW,KAAKM,SAAS,CAACG,OAAO,CAACwC,MAAM,GAAG,CAAC,EAAE;QAChDlD,YAAY,CAAC,IAAI,CAAC;MACpB;IACF;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,IAAIiE,QAAQ;IACZ,IAAIjD,eAAe,EAAE;MACnBiD,QAAQ,GAAGC,WAAW,CAAC7B,YAAY,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC,CAAE;IACpD;IACA,OAAO,MAAM8B,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAE;EACzC,CAAC,EAAE,CAACjD,eAAe,EAAEF,WAAW,CAAC,CAAC,CAAC,CAAE;;EAErC,oBACET,OAAA;IAAA+D,QAAA,gBACE/D,OAAA;MAAA+D,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGxB,CAACxD,eAAe,iBACfX,OAAA;MAAQoE,OAAO,EAAEnD,mBAAoB;MAAA8C,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC7D,EAGAxD,eAAe,iBACdX,OAAA,CAAAE,SAAA;MAAA6D,QAAA,gBACE/D,OAAA;QAAOqE,GAAG,EAAExD,QAAS;QAACyD,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAO;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpDnE,OAAA;QAAQqE,GAAG,EAAEvD,SAAU;QAACuB,KAAK,EAAC,KAAK;QAACC,MAAM,EAAC;MAAK;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACnD,CACH,EAGA5D,SAAS,iBAAIP,OAAA;MAAGsE,KAAK,EAAE;QAAEE,KAAK,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAV,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzF,CAAC;AAEV,CAAC;AAAC/D,EAAA,CApHID,UAAU;AAAAuE,EAAA,GAAVvE,UAAU;AAsHhB,eAAeA,UAAU;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}