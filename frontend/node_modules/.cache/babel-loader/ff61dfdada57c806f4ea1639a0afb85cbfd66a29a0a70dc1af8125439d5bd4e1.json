{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n\n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport tutorialAudio from './your-audio-file.mp3'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const [detected, setDetected] = useState(false);\n  const [tutorialStarted, setTutorialStarted] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [processing, setProcessing] = useState(false);\n  const audioRef = useRef(new Audio(tutorialAudio));\n  const startTutorial = () => {\n    audioRef.current.play().then(() => {\n      setTutorialStarted(true); // Start camera feed after audio plays\n    }).catch(err => {\n      console.error(\"Audio play error:\", err);\n    });\n  };\n  useEffect(() => {\n    if (tutorialStarted) {\n      const video = videoRef.current;\n\n      // Request access to the webcam\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(stream => {\n        video.srcObject = stream;\n\n        // Only call play() when the video is loaded\n        video.onloadedmetadata = () => {\n          video.play().catch(error => console.error(\"Error playing video:\", error));\n        };\n      }).catch(err => console.error(\"Error accessing webcam:\", err));\n      return () => {\n        if (video.srcObject) {\n          video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n        }\n      };\n    }\n  }, [tutorialStarted]);\n  let lastProcessedTime = Date.now();\n  const processFrame = async () => {\n    const currentTime = Date.now();\n    const timeDiff = currentTime - lastProcessedTime;\n\n    // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n    if (timeDiff < 200) {\n      return;\n    }\n    lastProcessedTime = currentTime;\n    const canvas = canvasRef.current;\n    const bufferCanvas = document.createElement('canvas'); // Create an off-screen buffer canvas\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n    const context = canvas.getContext('2d');\n    const bufferContext = bufferCanvas.getContext('2d'); // Context for the off-screen canvas\n\n    // Draw the current frame from video on buffer canvas\n    bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n    // Convert the frame to Blob and send to the backend for processing\n    bufferCanvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n      try {\n        setProcessing(true);\n        const response = await axios.post('http://localhost:5000/detect', formData, {\n          responseType: 'json'\n        });\n\n        // Handle the response\n        const {\n          detected,\n          augmented_image\n        } = response.data;\n\n        // Create an image object from the base64 encoded image\n        const img = new Image();\n        img.src = `data:image/jpeg;base64,${augmented_image}`;\n        img.onload = () => {\n          const canvasContext = canvas.getContext('2d');\n          canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw the augmented frame\n          setProcessing(false);\n          setDetected(detected); // Set detected based on the backend response\n        };\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n        setProcessing(false);\n        setDetected(false); // Ensure detection state is false if an error occurs\n      }\n    }, 'image/jpeg');\n  };\n  useEffect(() => {\n    if (tutorialStarted) {\n      const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n      return () => clearInterval(interval);\n    }\n  }, [tutorialStarted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!tutorialStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTutorial,\n      children: \"Start Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"640\",\n      height: \"480\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), detected && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue',\n        marginTop: '10px'\n      },\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraFeed, \"c1xoqAq+0rmS6EubG9XgJzx+1FE=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","tutorialAudio","jsxDEV","_jsxDEV","CameraFeed","_s","detected","setDetected","tutorialStarted","setTutorialStarted","videoRef","canvasRef","processing","setProcessing","audioRef","Audio","startTutorial","current","play","then","catch","err","console","error","video","navigator","mediaDevices","getUserMedia","stream","srcObject","onloadedmetadata","getTracks","forEach","track","stop","lastProcessedTime","Date","now","processFrame","currentTime","timeDiff","canvas","bufferCanvas","document","createElement","width","height","context","getContext","bufferContext","drawImage","toBlob","blob","formData","FormData","append","response","post","responseType","augmented_image","data","img","Image","src","onload","canvasContext","interval","setInterval","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","color","marginTop","_c","$RefreshReg$"],"sources":["/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n  \n//   useEffect(() => {\n//     const video = videoRef.current;\n  \n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n  \n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n  \n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n    \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n    \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n        \n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n        \n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n  \n  \n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport tutorialAudio from './your-audio-file.mp3'; // Adjust the path as needed\n\nconst CameraFeed = () => {\n  const [detected, setDetected] = useState(false);\n  const [tutorialStarted, setTutorialStarted] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [processing, setProcessing] = useState(false);\n  const audioRef = useRef(new Audio(tutorialAudio));\n\n  const startTutorial = () => {\n    audioRef.current.play().then(() => {\n      setTutorialStarted(true); // Start camera feed after audio plays\n    }).catch(err => {\n      console.error(\"Audio play error:\", err);\n    });\n  };\n\n  useEffect(() => {\n    if (tutorialStarted) {\n      const video = videoRef.current;\n\n      // Request access to the webcam\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then((stream) => {\n          video.srcObject = stream;\n\n          // Only call play() when the video is loaded\n          video.onloadedmetadata = () => {\n            video.play().catch(error => console.error(\"Error playing video:\", error));\n          };\n        })\n        .catch(err => console.error(\"Error accessing webcam:\", err));\n\n      return () => {\n        if (video.srcObject) {\n          video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n        }\n      };\n    }\n  }, [tutorialStarted]);\n\n  let lastProcessedTime = Date.now();\n\n  const processFrame = async () => {\n    const currentTime = Date.now();\n    const timeDiff = currentTime - lastProcessedTime;\n\n    // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n    if (timeDiff < 200) {\n      return;\n    }\n\n    lastProcessedTime = currentTime;\n\n    const canvas = canvasRef.current;\n    const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n\n    const context = canvas.getContext('2d');\n    const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n    // Draw the current frame from video on buffer canvas\n    bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n    // Convert the frame to Blob and send to the backend for processing\n    bufferCanvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n\n      try {\n        setProcessing(true);\n        const response = await axios.post('http://localhost:5000/detect', formData, {\n          responseType: 'json'\n        });\n\n        // Handle the response\n        const { detected, augmented_image } = response.data;\n\n        // Create an image object from the base64 encoded image\n        const img = new Image();\n        img.src = `data:image/jpeg;base64,${augmented_image}`;\n        img.onload = () => {\n          const canvasContext = canvas.getContext('2d');\n          canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n          setProcessing(false);\n          setDetected(detected);  // Set detected based on the backend response\n        };\n\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n        setProcessing(false);\n        setDetected(false);  // Ensure detection state is false if an error occurs\n      }\n    }, 'image/jpeg');\n  };\n\n  useEffect(() => {\n    if (tutorialStarted) {\n      const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n      return () => clearInterval(interval);\n    }\n  }, [tutorialStarted]);\n\n  return (\n    <div>\n      {!tutorialStarted && <button onClick={startTutorial}>Start Tutorial</button>}\n      <video ref={videoRef} style={{ display: 'none' }} />\n      <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n      {/* Display the text \"Chemical pouring\" only when marker with ID 0 is detected */}\n      {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n      {/* Display \"Completed\" when marker with ID 0 is detected */}\n      {detected && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n    </div>\n  );\n};\n\nexport default CameraFeed;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMW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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}