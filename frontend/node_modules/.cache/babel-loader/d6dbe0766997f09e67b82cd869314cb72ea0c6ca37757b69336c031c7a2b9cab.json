{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n\n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n//**********WORKING PLAY AUDIO THEN TAKE DETECTION**************** */\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [tutorialStarted, setTutorialStarted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/distilled_water.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().then(() => {\n//       setTutorialStarted(true); // Start camera feed after audio plays\n//     }).catch(err => {\n//       console.error(\"Audio play error:\", err);\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const video = videoRef.current;\n\n//       // Request access to the webcam\n//       navigator.mediaDevices.getUserMedia({ video: true })\n//         .then((stream) => {\n//           video.srcObject = stream;\n\n//           // Only call play() when the video is loaded\n//           video.onloadedmetadata = () => {\n//             video.play().catch(error => console.error(\"Error playing video:\", error));\n//           };\n//         })\n//         .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//       return () => {\n//         if (video.srcObject) {\n//           video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//         }\n//       };\n//     }\n//   }, [tutorialStarted]);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//       return () => clearInterval(interval);\n//     }\n//   }, [tutorialStarted]);\n\n//   return (\n//     <div>\n//       {!tutorialStarted && <button onClick={startTutorial}>Start Tutorial</button>}\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker with ID 0 is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {/* Display \"Completed\" when marker with ID 0 is detected */}\n//       {detected && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/voice1.mp3'));\n//   const completionAudioRef = useRef(new Audio('/completed.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().catch(err => console.error(\"Audio play error:\", err));\n//   };\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     if (completed) return; // Stop processing if completed\n\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         console.log(\"Response Data:\", response.data); // Log the entire response data\n\n//         // Handle the response\n//         const { detected, augmented_image, ids } = response.data;\n\n//         // Check if detection happened\n//         if (detected) {\n//           console.log('Detection is true');\n//           console.log('Detected IDs:', ids); // This should now log the detected IDs\n\n//           // Check if the detected marker is ID 0\n//           if (ids && ids.includes(0)) {\n//             setCompleted(true);\n//             console.log('Marker ID 0 detected');\n//             videoRef.current.srcObject.getTracks().forEach(track => track.stop()); // Pause camera stream\n//             completionAudioRef.current.play().catch(err => console.error(\"Completion audio play error:\", err));\n//           }\n//         }\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, [completed]);\n\n//   return (\n//     <div>\n//       <button onClick={startTutorial}>Start Tutorial</button>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const audioRefs = useRef([\n//     new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n//     new Audio('/voice2.mp3'), // Step 2: Show distilled water\n//     new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n//     // Add the rest of the steps here\n//     new Audio('/voice13.mp3'), // Step 13: Test completion message\n//   ]);\n\n//   useEffect(() => {\n//     // Play the first step's audio when the component is loaded\n//     audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n//     // Web camera initialization logic\n//     const video = videoRef.current;\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const processFrame = async () => {\n//     if (completed) return;  // Stop processing if test is complete\n\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n\n//     // Send frame to backend for ArUco detection\n//     canvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n//       try {\n//         const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n//         const { detected, ids } = response.data;\n\n//         if (detected && ids) {\n//           handleMarkerDetection(ids);\n//         }\n\n//         // Display processed frame (augmented) coming from backend\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n//         img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   const handleMarkerDetection = (ids) => {\n//     const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n//     if (ids.includes(expectedMarkerId)) {\n//       console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n//       // Move to the next step\n//       setCurrentStep(currentStep + 1);\n\n//       // Stop current audio and play the next\n//       if (currentStep < audioRefs.current.length) {\n//         audioRefs.current[currentStep].pause();\n//         audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n//       }\n\n//       // Mark test as completed when last step is done\n//       if (currentStep === audioRefs.current.length - 1) {\n//         setCompleted(true);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n//     return () => clearInterval(interval);\n//   }, [currentStep]);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const [detected, setDetected] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0); // Track the current step\n  const [isTutorialStarted, setIsTutorialStarted] = useState(false); // Track whether tutorial has started\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const audioRefs = useRef([new Audio('/voice1.mp3'),\n  // Step 1: Introduction to sulfate test\n  new Audio('/voice2.mp3'),\n  // Step 2: Show distilled water\n  new Audio('/voice3.mp3'),\n  // Step 3: Show test tube 1\n  new Audio('/voice4.mp3'), new Audio('/voice5.mp3'), new Audio('/voice6.mp3'), new Audio('/voice7.mp3'), new Audio('/voice8.mp3'), new Audio('/voice9.mp3'), new Audio('/voice10.mp3'), new Audio('/voice11.mp3'), new Audio('/voice12.mp3'),\n  // Add the rest of the steps here\n  new Audio('/voice13.mp3') // Step 13: Test completion message\n  ]);\n\n  // Start camera feed and process frames only when the tutorial is started\n  useEffect(() => {\n    if (isTutorialStarted) {\n      const video = videoRef.current;\n\n      // Web camera initialization logic\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(stream => {\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n          video.play();\n        };\n      }).catch(err => console.error(\"Error accessing webcam:\", err));\n\n      // Clean up: stop the camera stream when component unmounts\n      return () => {\n        if (video.srcObject) {\n          video.srcObject.getTracks().forEach(track => track.stop());\n        }\n      };\n    }\n  }, [isTutorialStarted]); // Only run this effect when the tutorial starts\n\n  const processFrame = async () => {\n    if (!isTutorialStarted || completed) return; // Stop processing if the tutorial hasn't started or test is complete\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Ensure video is ready and draw the video feed onto the canvas\n    const video = videoRef.current;\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Send frame to backend for ArUco detection\n      canvas.toBlob(async blob => {\n        const formData = new FormData();\n        formData.append('image', blob, 'frame.jpg');\n        try {\n          const response = await axios.post('http://localhost:5000/detect', formData, {\n            responseType: 'json'\n          });\n          // console.log(\"Response from backend:\", response.data);  // Log response\n\n          const {\n            detected,\n            augmented_image,\n            ids,\n            currentStep\n          } = response.data; // Destructure response\n          // console.log(`Detected: ${detected}, IDs: ${ids}, Augmented Image Length: ${augmented_image.length}`); // Log image length\n\n          // if (detected && ids) {\n          //   handleMarkerDetection(ids);\n          // }\n\n          if (ids) {\n            handleMarkerDetection(ids, currentStep);\n          }\n\n          // Clear the canvas before drawing the new image\n          context.clearRect(0, 0, canvas.width, canvas.height);\n\n          // Display processed frame (augmented) coming from backend\n          const img = new Image();\n          img.src = `data:image/jpeg;base64,${augmented_image}`;\n          img.onload = () => {\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);\n          };\n        } catch (err) {\n          console.error(\"Error processing frame:\", err);\n        }\n      }, 'image/jpeg');\n    }\n  };\n\n  // const handleMarkerDetection = (ids) => {\n  //   const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n  //   if (ids.includes(expectedMarkerId)) {\n  //     console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n  //     // Move to the next step\n  //     setCurrentStep(currentStep + 1);\n\n  //     // Stop current audio and play the next\n  //     if (currentStep < audioRefs.current.length) {\n  //       console.log('-----------------------------------', currentStep)\n  //       audioRefs.current[currentStep].pause();\n  //       audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n  //     }\n\n  //     // Mark test as completed when last step is done\n  //     if (currentStep === audioRefs.current.length - 1) {\n  //       setCompleted(true);\n  //     }\n  //   }\n  // };\n\n  const handleMarkerDetection = (ids, currentStepFromBackend) => {\n    if (completed) return;\n    // console.log('inside handleMarkerDetection');\n    // Stop if completed\n\n    // For step 5, ensure both IDs 1 and 3 are present\n    if (currentStep === 5 && ids.includes(1) && ids.includes(3)) {\n      console.log('Step 5: Detected both Marker 1 and Marker 3');\n      setCurrentStep(currentStep + 1);\n      playNextAudio();\n      return;\n    }\n    const expectedMarkerId = currentStep; // Expect the next marker ID\n    // console.log('expectedMarkerId: '+expectedMarkerId+',currentSTep: '+currentStep)\n\n    if (ids.includes(expectedMarkerId)) {\n      console.log(`Step ${expectedMarkerId} verified with marker ID: ${expectedMarkerId}`);\n      setCurrentStep(currentStep + 1);\n      playNextAudio();\n      // if (currentStep !== 0) {\n      //   // Move to the next step\n      //   console.log('CURRENT STEP:', currentStep);\n\n      //   // Stop current audio and play the next\n      //   audioRefs.current[currentStep + 2].pause();\n      //   audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n      //   // Mark test as completed when last instructional step is done\n      //   if (currentStep === audioRefs.current.length - 2) {\n      //     setCompleted(true);\n      //     audioRefs.current[audioRefs.current.length - 1].play().catch(err => console.error(\"Audio play error:\", err)); // Play completion audio\n      //   }\n      // }\n      // else{\n      //   audioRefs.current[currentStep + 2].pause();\n      //   audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n      // }\n    }\n  };\n  const playNextAudio = () => {\n    // Stop current audio and play the next\n    audioRefs.current[currentStep + 2].pause();\n    audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n\n    // Mark test as completed when last instructional step is done\n    if (currentStep === audioRefs.current.length - 2) {\n      setCompleted(true);\n      audioRefs.current[audioRefs.current.length - 1].play().catch(err => console.error(\"Audio play error:\", err)); // Play completion audio\n    }\n  };\n\n  // Trigger the frame processing when the tutorial starts\n  useEffect(() => {\n    if (isTutorialStarted) {\n      const interval = setInterval(processFrame, 1000 / 10); // 10 FPS\n      return () => clearInterval(interval);\n    }\n  }, [isTutorialStarted, currentStep]);\n\n  // const startTutorial = () => {\n  //   setIsTutorialStarted(true);\n  //   audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n  // };\n\n  const startTutorial = () => {\n    setIsTutorialStarted(true);\n    audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n    audioRefs.current[0].onended = () => {\n      audioRefs.current[1].play().catch(err => console.error(\"Audio play error:\", err));\n    };\n    setCurrentStep(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isTutorialStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTutorial,\n      children: \"Start Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 792,\n      columnNumber: 9\n    }, this), isTutorialStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"640\",\n        height: \"480\",\n        style: {\n          border: '1px solid black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 11\n      }, this), completed && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'blue',\n          marginTop: '10px'\n        },\n        children: \"Sulfate Ion Test Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 795,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 790,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraFeed, \"BJLpCL0sha16shpHbVedWYJC9xk=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","CameraFeed","_s","detected","setDetected","completed","setCompleted","currentStep","setCurrentStep","isTutorialStarted","setIsTutorialStarted","videoRef","canvasRef","audioRefs","Audio","video","current","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadedmetadata","play","catch","err","console","error","getTracks","forEach","track","stop","processFrame","canvas","context","getContext","readyState","HAVE_ENOUGH_DATA","drawImage","width","height","toBlob","blob","formData","FormData","append","response","post","responseType","augmented_image","ids","data","handleMarkerDetection","clearRect","img","Image","src","onload","currentStepFromBackend","includes","log","playNextAudio","expectedMarkerId","pause","length","interval","setInterval","clearInterval","startTutorial","onended","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","border","color","marginTop","_c","$RefreshReg$"],"sources":["/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false)  \n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n  \n//   useEffect(() => {\n//     const video = videoRef.current;\n  \n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n  \n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n  \n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n    \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n    \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n        \n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(true)\n//         };\n        \n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n  \n  \n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* {processing } */}\n//     {/* Display the text \"Chemical pouring\" when marker is detected */}\n//     {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n//**********WORKING PLAY AUDIO THEN TAKE DETECTION**************** */\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [tutorialStarted, setTutorialStarted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/distilled_water.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().then(() => {\n//       setTutorialStarted(true); // Start camera feed after audio plays\n//     }).catch(err => {\n//       console.error(\"Audio play error:\", err);\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const video = videoRef.current;\n\n//       // Request access to the webcam\n//       navigator.mediaDevices.getUserMedia({ video: true })\n//         .then((stream) => {\n//           video.srcObject = stream;\n\n//           // Only call play() when the video is loaded\n//           video.onloadedmetadata = () => {\n//             video.play().catch(error => console.error(\"Error playing video:\", error));\n//           };\n//         })\n//         .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//       return () => {\n//         if (video.srcObject) {\n//           video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//         }\n//       };\n//     }\n//   }, [tutorialStarted]);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n\n//         // Handle the response\n//         const { detected, augmented_image } = response.data;\n\n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     if (tutorialStarted) {\n//       const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//       return () => clearInterval(interval);\n//     }\n//   }, [tutorialStarted]);\n\n//   return (\n//     <div>\n//       {!tutorialStarted && <button onClick={startTutorial}>Start Tutorial</button>}\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker with ID 0 is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {/* Display \"Completed\" when marker with ID 0 is detected */}\n//       {detected && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n//   const audioRef = useRef(new Audio('/voice1.mp3'));\n//   const completionAudioRef = useRef(new Audio('/completed.mp3'));\n\n//   const startTutorial = () => {\n//     audioRef.current.play().catch(err => console.error(\"Audio play error:\", err));\n//   };\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     if (completed) return; // Stop processing if completed\n  \n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n  \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n  \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'json'\n//         });\n  \n//         console.log(\"Response Data:\", response.data); // Log the entire response data\n  \n//         // Handle the response\n//         const { detected, augmented_image, ids } = response.data;\n  \n//         // Check if detection happened\n//         if (detected) {\n//           console.log('Detection is true');\n//           console.log('Detected IDs:', ids); // This should now log the detected IDs\n        \n//           // Check if the detected marker is ID 0\n//           if (ids && ids.includes(0)) {\n//             setCompleted(true);\n//             console.log('Marker ID 0 detected');\n//             videoRef.current.srcObject.getTracks().forEach(track => track.stop()); // Pause camera stream\n//             completionAudioRef.current.play().catch(err => console.error(\"Completion audio play error:\", err));\n//           }\n//         }\n        \n  \n//         // Create an image object from the base64 encoded image\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${augmented_image}`;\n//         img.onload = () => {\n//           const canvasContext = canvas.getContext('2d');\n//           canvasContext.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//           setDetected(detected);  // Set detected based on the backend response\n//         };\n  \n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//         setDetected(false);  // Ensure detection state is false if an error occurs\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, [completed]);\n\n//   return (\n//     <div>\n//       <button onClick={startTutorial}>Start Tutorial</button>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {/* Display the text \"Chemical pouring\" only when marker is detected */}\n//       {/* {detected && <p style={{ color: 'green', marginTop: '10px' }}>Chemical pouring</p>} */}\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const [detected, setDetected] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const audioRefs = useRef([\n//     new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n//     new Audio('/voice2.mp3'), // Step 2: Show distilled water\n//     new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n//     // Add the rest of the steps here\n//     new Audio('/voice13.mp3'), // Step 13: Test completion message\n//   ]);\n\n//   useEffect(() => {\n//     // Play the first step's audio when the component is loaded\n//     audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n\n//     // Web camera initialization logic\n//     const video = videoRef.current;\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const processFrame = async () => {\n//     if (completed) return;  // Stop processing if test is complete\n\n//     const canvas = canvasRef.current;\n//     const context = canvas.getContext('2d');\n//     context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n\n//     // Send frame to backend for ArUco detection\n//     canvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n//       try {\n//         const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n//         const { detected, ids } = response.data;\n\n//         if (detected && ids) {\n//           handleMarkerDetection(ids);\n//         }\n\n//         // Display processed frame (augmented) coming from backend\n//         const img = new Image();\n//         img.src = `data:image/jpeg;base64,${response.data.augmented_image}`;\n//         img.onload = () => context.drawImage(img, 0, 0, canvas.width, canvas.height);\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   const handleMarkerDetection = (ids) => {\n//     const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n//     if (ids.includes(expectedMarkerId)) {\n//       console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n//       // Move to the next step\n//       setCurrentStep(currentStep + 1);\n      \n//       // Stop current audio and play the next\n//       if (currentStep < audioRefs.current.length) {\n//         audioRefs.current[currentStep].pause();\n//         audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n//       }\n\n//       // Mark test as completed when last step is done\n//       if (currentStep === audioRefs.current.length - 1) {\n//         setCompleted(true);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n//     return () => clearInterval(interval);\n//   }, [currentStep]);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst CameraFeed = () => {\n  const [detected, setDetected] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);  // Track the current step\n  const [isTutorialStarted, setIsTutorialStarted] = useState(false); // Track whether tutorial has started\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const audioRefs = useRef([\n    new Audio('/voice1.mp3'), // Step 1: Introduction to sulfate test\n    new Audio('/voice2.mp3'), // Step 2: Show distilled water\n    new Audio('/voice3.mp3'), // Step 3: Show test tube 1\n    new Audio('/voice4.mp3'),\n    new Audio('/voice5.mp3'),\n    new Audio('/voice6.mp3'),\n    new Audio('/voice7.mp3'),\n    new Audio('/voice8.mp3'),\n    new Audio('/voice9.mp3'),\n    new Audio('/voice10.mp3'),\n    new Audio('/voice11.mp3'),\n    new Audio('/voice12.mp3'),\n    // Add the rest of the steps here\n    new Audio('/voice13.mp3'), // Step 13: Test completion message\n  ]);\n\n  // Start camera feed and process frames only when the tutorial is started\n  useEffect(() => {\n    if (isTutorialStarted) {\n      const video = videoRef.current;\n\n      // Web camera initialization logic\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then((stream) => {\n          video.srcObject = stream;\n          video.onloadedmetadata = () => {\n            video.play();\n          };\n        })\n        .catch(err => console.error(\"Error accessing webcam:\", err));\n\n      // Clean up: stop the camera stream when component unmounts\n      return () => {\n        if (video.srcObject) {\n          video.srcObject.getTracks().forEach(track => track.stop());\n        }\n      };\n    }\n  }, [isTutorialStarted]);  // Only run this effect when the tutorial starts\n\n  const processFrame = async () => {\n    if (!isTutorialStarted || completed) return;  // Stop processing if the tutorial hasn't started or test is complete\n  \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    // Ensure video is ready and draw the video feed onto the canvas\n    const video = videoRef.current;\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n  \n      // Send frame to backend for ArUco detection\n      canvas.toBlob(async (blob) => {\n        const formData = new FormData();\n        formData.append('image', blob, 'frame.jpg');\n        try {\n          const response = await axios.post('http://localhost:5000/detect', formData, { responseType: 'json' });\n          // console.log(\"Response from backend:\", response.data);  // Log response\n  \n          const { detected, augmented_image, ids, currentStep } = response.data;  // Destructure response\n          // console.log(`Detected: ${detected}, IDs: ${ids}, Augmented Image Length: ${augmented_image.length}`); // Log image length\n  \n          // if (detected && ids) {\n          //   handleMarkerDetection(ids);\n          // }\n          \n          if (ids) {\n              handleMarkerDetection(ids, currentStep);\n            }\n\n          // Clear the canvas before drawing the new image\n          context.clearRect(0, 0, canvas.width, canvas.height);\n  \n          // Display processed frame (augmented) coming from backend\n          const img = new Image();\n          img.src = `data:image/jpeg;base64,${augmented_image}`;\n          img.onload = () => {\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);\n          };\n        } catch (err) {\n          console.error(\"Error processing frame:\", err);\n        }\n      }, 'image/jpeg');\n    }\n  };\n  \n\n  // const handleMarkerDetection = (ids) => {\n  //   const expectedMarkerId = currentStep;  // Assuming marker ID matches the current step\n  //   if (ids.includes(expectedMarkerId)) {\n  //     console.log(`Step ${currentStep} verified with marker ID: ${expectedMarkerId}`);\n\n  //     // Move to the next step\n  //     setCurrentStep(currentStep + 1);\n      \n  //     // Stop current audio and play the next\n  //     if (currentStep < audioRefs.current.length) {\n  //       console.log('-----------------------------------', currentStep)\n  //       audioRefs.current[currentStep].pause();\n  //       audioRefs.current[currentStep + 1].play().catch(err => console.error(\"Audio play error:\", err));\n  //     }\n\n  //     // Mark test as completed when last step is done\n  //     if (currentStep === audioRefs.current.length - 1) {\n  //       setCompleted(true);\n  //     }\n  //   }\n  // };\n\n\n  const handleMarkerDetection = (ids,currentStepFromBackend) => {\n    if (completed) return;\n    // console.log('inside handleMarkerDetection');\n     // Stop if completed\n\n\n        // For step 5, ensure both IDs 1 and 3 are present\n    if (currentStep === 5 && ids.includes(1) && ids.includes(3)) {\n      console.log('Step 5: Detected both Marker 1 and Marker 3');\n      setCurrentStep(currentStep + 1);\n      playNextAudio();\n      return;\n    }\n\n    const expectedMarkerId = currentStep; // Expect the next marker ID\n    // console.log('expectedMarkerId: '+expectedMarkerId+',currentSTep: '+currentStep)\n\n    if (ids.includes(expectedMarkerId)) {\n      console.log(`Step ${expectedMarkerId} verified with marker ID: ${expectedMarkerId}`);\n      setCurrentStep(currentStep + 1);\n      playNextAudio();\n      // if (currentStep !== 0) {\n      //   // Move to the next step\n      //   console.log('CURRENT STEP:', currentStep);\n        \n\n      //   // Stop current audio and play the next\n      //   audioRefs.current[currentStep + 2].pause();\n      //   audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n      //   // Mark test as completed when last instructional step is done\n      //   if (currentStep === audioRefs.current.length - 2) {\n      //     setCompleted(true);\n      //     audioRefs.current[audioRefs.current.length - 1].play().catch(err => console.error(\"Audio play error:\", err)); // Play completion audio\n      //   }\n      // }\n      // else{\n      //   audioRefs.current[currentStep + 2].pause();\n      //   audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n      // }\n    }\n  };\n\n  const playNextAudio = () => {\n    // Stop current audio and play the next\n    audioRefs.current[currentStep + 2].pause();\n    audioRefs.current[currentStep + 2].play().catch(err => console.error(\"Audio play error:\", err));\n  \n    // Mark test as completed when last instructional step is done\n    if (currentStep === audioRefs.current.length - 2) {\n      setCompleted(true);\n      audioRefs.current[audioRefs.current.length - 1].play().catch(err => console.error(\"Audio play error:\", err)); // Play completion audio\n    }\n  };\n\n  \n  // Trigger the frame processing when the tutorial starts\n  useEffect(() => {\n    if (isTutorialStarted) {\n      const interval = setInterval(processFrame, 1000 / 10);  // 10 FPS\n      return () => clearInterval(interval);\n    }\n  }, [isTutorialStarted, currentStep]);\n\n  // const startTutorial = () => {\n  //   setIsTutorialStarted(true);\n  //   audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n  // };\n\n  const startTutorial = () => {\n    setIsTutorialStarted(true);\n    audioRefs.current[0].play().catch(err => console.error(\"Audio play error:\", err));\n    audioRefs.current[0].onended = () => {\n      audioRefs.current[1].play().catch(err => console.error(\"Audio play error:\", err));\n    };\n    setCurrentStep(0);\n  };\n  \n\n  return (\n    <div>\n      {!isTutorialStarted && (\n        <button onClick={startTutorial}>Start Tutorial</button>\n      )}\n      {isTutorialStarted && (\n        <div>\n          <video ref={videoRef} style={{ display: 'none' }} />\n          <canvas ref={canvasRef} width=\"640\" height=\"480\" style={{ border: '1px solid black' }} />\n          {completed && <p style={{ color: 'blue', marginTop: '10px' }}>Sulfate Ion Test Completed</p>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CameraFeed;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,O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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}