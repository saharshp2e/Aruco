{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [processing, setProcessing] = useState(false);\n  useEffect(() => {\n    const video = videoRef.current;\n\n    // Request access to the webcam\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      video.srcObject = stream;\n\n      // Only call play() when the video is loaded\n      video.onloadedmetadata = () => {\n        video.play().catch(error => console.error(\"Error playing video:\", error));\n      };\n    }).catch(err => console.error(\"Error accessing webcam:\", err));\n    return () => {\n      if (video.srcObject) {\n        video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n      }\n    };\n  }, []);\n\n  //   let lastProcessedTime = currentTime;\n\n  const processFrame = async () => {\n    const currentTime = Date.now();\n    let lastProcessedTime = currentTime;\n    const timeDiff = currentTime - lastProcessedTime;\n\n    // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n    if (timeDiff < 200) {\n      return;\n    }\n\n    // lastProcessedTime = currentTime;\n    // let lastProcessedTime = currentTime;\n\n    const canvas = canvasRef.current;\n    const bufferCanvas = document.createElement('canvas'); // Create an off-screen buffer canvas\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n    const context = canvas.getContext('2d');\n    const bufferContext = bufferCanvas.getContext('2d'); // Context for the off-screen canvas\n\n    // Draw the current frame from video on buffer canvas\n    bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n    // Convert the frame to Blob and send to the backend for processing\n    bufferCanvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n      try {\n        setProcessing(true);\n        const response = await axios.post('http://localhost:5000/detect', formData, {\n          responseType: 'blob'\n        });\n\n        // Create an image object from the returned blob\n        const img = new Image();\n        img.src = URL.createObjectURL(response.data);\n        img.onload = () => {\n          context.clearRect(0, 0, canvas.width, canvas.height); // Clear the previous frame\n          context.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw the augmented frame\n          setProcessing(false);\n        };\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n        setProcessing(false);\n      }\n    }, 'image/jpeg');\n  };\n  useEffect(() => {\n    const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"640\",\n      height: \"480\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraFeed, \"NPqr/pQG3ztczJC6BbMX/mzTZgw=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","CameraFeed","_s","videoRef","canvasRef","processing","setProcessing","video","current","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadedmetadata","play","catch","error","console","err","getTracks","forEach","track","stop","processFrame","currentTime","Date","now","lastProcessedTime","timeDiff","canvas","bufferCanvas","document","createElement","width","height","context","getContext","bufferContext","drawImage","toBlob","blob","formData","FormData","append","response","post","responseType","img","Image","src","URL","createObjectURL","data","onload","clearRect","interval","setInterval","clearInterval","children","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst CameraFeed = () => {\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [processing, setProcessing] = useState(false);\n  \n  useEffect(() => {\n    const video = videoRef.current;\n  \n    // Request access to the webcam\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        video.srcObject = stream;\n  \n        // Only call play() when the video is loaded\n        video.onloadedmetadata = () => {\n          video.play().catch(error => console.error(\"Error playing video:\", error));\n        };\n      })\n      .catch(err => console.error(\"Error accessing webcam:\", err));\n  \n    return () => {\n      if (video.srcObject) {\n        video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n      }\n    };\n  }, []);\n\n\n//   let lastProcessedTime = currentTime;\n\n  const processFrame = async () => {\n    const currentTime = Date.now();\n    let lastProcessedTime = currentTime;\n    const timeDiff = currentTime - lastProcessedTime;\n  \n    // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n    if (timeDiff < 200) {\n      return;\n    }\n  \n    // lastProcessedTime = currentTime;\n    // let lastProcessedTime = currentTime;\n  \n    const canvas = canvasRef.current;\n    const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n  \n    const context = canvas.getContext('2d');\n    const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n    \n    // Draw the current frame from video on buffer canvas\n    bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n    \n    // Convert the frame to Blob and send to the backend for processing\n    bufferCanvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append('image', blob, 'frame.jpg');\n  \n      try {\n        setProcessing(true);\n        const response = await axios.post('http://localhost:5000/detect', formData, {\n          responseType: 'blob'\n        });\n        \n        // Create an image object from the returned blob\n        const img = new Image();\n        img.src = URL.createObjectURL(response.data);\n        img.onload = () => {\n          context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n          context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n          setProcessing(false);\n        };\n      } catch (err) {\n        console.error(\"Error processing frame:\", err);\n        setProcessing(false);\n      }\n    }, 'image/jpeg');\n  };\n  \n  \n\n  useEffect(() => {\n    const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <video ref={videoRef} style={{ display: 'none' }} />\n      <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n      {processing && <p>Processing...</p>}\n    </div>\n  );\n};\n\nexport default CameraFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}