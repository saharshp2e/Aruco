{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n\n//   useEffect(() => {\n//     const video = videoRef.current;\n\n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n\n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n\n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n\n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n\n//     lastProcessedTime = currentTime;\n\n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n\n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n\n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n\n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n\n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//         };\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {processing && <p>Processing...</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  const [isMarkerDetected, setIsMarkerDetected] = useState(false); // New state for marker detection\n  const [processing, setProcessing] = useState(false);\n  let lastProcessedTime = Date.now();\n  useEffect(() => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const processFrame = async () => {\n      const currentTime = Date.now();\n      const timeDiff = currentTime - lastProcessedTime;\n      if (timeDiff < 200 || processing) {\n        return; // Throttle frame processing and prevent multiple requests\n      }\n      lastProcessedTime = currentTime;\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Double buffering technique\n      const bufferCanvas = document.createElement('canvas');\n      bufferCanvas.width = canvas.width;\n      bufferCanvas.height = canvas.height;\n      const bufferContext = bufferCanvas.getContext('2d');\n      bufferContext.drawImage(video, 0, 0, bufferCanvas.width, bufferCanvas.height);\n      bufferCanvas.toBlob(async blob => {\n        const formData = new FormData();\n        formData.append('image', blob, 'frame.jpg');\n        try {\n          setProcessing(true);\n          const response = await axios.post('http://localhost:5000/detect', formData, {\n            responseType: 'blob'\n          });\n          const img = new Image();\n          img.src = URL.createObjectURL(response.data);\n          img.onload = () => {\n            context.clearRect(0, 0, canvas.width, canvas.height); // Clear the previous frame\n            context.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw the augmented frame\n\n            // Check if the marker is detected by analyzing the backend response\n            setIsMarkerDetected(true); // Marker detected, update the state\n          };\n        } catch (err) {\n          console.error('Error processing frame:', err);\n          setIsMarkerDetected(false); // No marker detected\n        } finally {\n          setProcessing(false);\n        }\n      }, 'image/jpeg');\n    };\n    const intervalId = setInterval(processFrame, 100); // Adjust the interval based on desired frame rate\n\n    return () => clearInterval(intervalId);\n  }, [processing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      width: \"640\",\n      height: \"480\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"640\",\n      height: \"480\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), isMarkerDetected && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green',\n        marginTop: '10px'\n      },\n      children: \"Aruco marker detected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraFeed, \"9HFcynmF7T2hgCvykoyF3eosEww=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","CameraFeed","_s","videoRef","canvasRef","isMarkerDetected","setIsMarkerDetected","processing","setProcessing","lastProcessedTime","Date","now","video","current","canvas","context","getContext","processFrame","currentTime","timeDiff","drawImage","width","height","bufferCanvas","document","createElement","bufferContext","toBlob","blob","formData","FormData","append","response","post","responseType","img","Image","src","URL","createObjectURL","data","onload","clearRect","err","console","error","intervalId","setInterval","clearInterval","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","style","color","marginTop","_c","$RefreshReg$"],"sources":["/home/user/Documents/Aruco_POC/aruco-detector/src/CameraFeed.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const CameraFeed = () => {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [processing, setProcessing] = useState(false);\n  \n//   useEffect(() => {\n//     const video = videoRef.current;\n  \n//     // Request access to the webcam\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         video.srcObject = stream;\n  \n//         // Only call play() when the video is loaded\n//         video.onloadedmetadata = () => {\n//           video.play().catch(error => console.error(\"Error playing video:\", error));\n//         };\n//       })\n//       .catch(err => console.error(\"Error accessing webcam:\", err));\n  \n//     return () => {\n//       if (video.srcObject) {\n//         video.srcObject.getTracks().forEach(track => track.stop()); // Stop webcam access when the component unmounts\n//       }\n//     };\n//   }, []);\n\n\n//   let lastProcessedTime = Date.now();\n\n//   const processFrame = async () => {\n//     const currentTime = Date.now();\n//     const timeDiff = currentTime - lastProcessedTime;\n  \n//     // Adjust frame rate by only sending frames every 200ms (5 FPS, adjust as necessary)\n//     if (timeDiff < 200) {\n//       return;\n//     }\n  \n//     lastProcessedTime = currentTime;\n  \n//     const canvas = canvasRef.current;\n//     const bufferCanvas = document.createElement('canvas');  // Create an off-screen buffer canvas\n//     bufferCanvas.width = canvas.width;\n//     bufferCanvas.height = canvas.height;\n  \n//     const context = canvas.getContext('2d');\n//     const bufferContext = bufferCanvas.getContext('2d');  // Context for the off-screen canvas\n    \n//     // Draw the current frame from video on buffer canvas\n//     bufferContext.drawImage(videoRef.current, 0, 0, bufferCanvas.width, bufferCanvas.height);\n    \n//     // Convert the frame to Blob and send to the backend for processing\n//     bufferCanvas.toBlob(async (blob) => {\n//       const formData = new FormData();\n//       formData.append('image', blob, 'frame.jpg');\n  \n//       try {\n//         setProcessing(true);\n//         const response = await axios.post('http://localhost:5000/detect', formData, {\n//           responseType: 'blob'\n//         });\n        \n//         // Create an image object from the returned blob\n//         const img = new Image();\n//         img.src = URL.createObjectURL(response.data);\n//         img.onload = () => {\n//           context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n//           context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n//           setProcessing(false);\n//         };\n//       } catch (err) {\n//         console.error(\"Error processing frame:\", err);\n//         setProcessing(false);\n//       }\n//     }, 'image/jpeg');\n//   };\n  \n  \n\n//   useEffect(() => {\n//     const interval = setInterval(processFrame, 1000 / 10); // Process 10 frames per second\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={videoRef} style={{ display: 'none' }} />\n//       <canvas ref={canvasRef} width=\"640\" height=\"480\" />\n//       {processing && <p>Processing...</p>}\n//     </div>\n//   );\n// };\n\n// export default CameraFeed;\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nconst CameraFeed = () => {\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  const [isMarkerDetected, setIsMarkerDetected] = useState(false);  // New state for marker detection\n  const [processing, setProcessing] = useState(false);\n  let lastProcessedTime = Date.now();\n\n  useEffect(() => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const processFrame = async () => {\n      const currentTime = Date.now();\n      const timeDiff = currentTime - lastProcessedTime;\n\n      if (timeDiff < 200 || processing) {\n        return;  // Throttle frame processing and prevent multiple requests\n      }\n\n      lastProcessedTime = currentTime;\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Double buffering technique\n      const bufferCanvas = document.createElement('canvas');\n      bufferCanvas.width = canvas.width;\n      bufferCanvas.height = canvas.height;\n      const bufferContext = bufferCanvas.getContext('2d');\n      bufferContext.drawImage(video, 0, 0, bufferCanvas.width, bufferCanvas.height);\n\n      bufferCanvas.toBlob(async (blob) => {\n        const formData = new FormData();\n        formData.append('image', blob, 'frame.jpg');\n\n        try {\n          setProcessing(true);\n          const response = await axios.post('http://localhost:5000/detect', formData, {\n            responseType: 'blob',\n          });\n\n          const img = new Image();\n          img.src = URL.createObjectURL(response.data);\n          img.onload = () => {\n            context.clearRect(0, 0, canvas.width, canvas.height);  // Clear the previous frame\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);  // Draw the augmented frame\n\n            // Check if the marker is detected by analyzing the backend response\n            setIsMarkerDetected(true);  // Marker detected, update the state\n          };\n        } catch (err) {\n          console.error('Error processing frame:', err);\n          setIsMarkerDetected(false);  // No marker detected\n        } finally {\n          setProcessing(false);\n        }\n      }, 'image/jpeg');\n    };\n\n    const intervalId = setInterval(processFrame, 100);  // Adjust the interval based on desired frame rate\n\n    return () => clearInterval(intervalId);\n  }, [processing]);\n\n  return (\n    <div>\n      <video ref={videoRef} autoPlay width=\"640\" height=\"480\"></video>\n      <canvas ref={canvasRef} width=\"640\" height=\"480\"></canvas>\n\n      {/* Display the text when a marker is detected */}\n      {isMarkerDetected && <p style={{ color: 'green', marginTop: '10px' }}>Aruco marker detected</p>}\n    </div>\n  );\n};\n\nexport default CameraFeed;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGN,MAAM,CAAC,CAAC;EACzB,MAAMO,SAAS,GAAGP,MAAM,CAAC,CAAC;EAC1B,MAAM,CAACQ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EAClE,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,IAAIc,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAElCf,SAAS,CAAC,MAAM;IACd,MAAMgB,KAAK,GAAGT,QAAQ,CAACU,OAAO;IAC9B,MAAMC,MAAM,GAAGV,SAAS,CAACS,OAAO;IAChC,MAAME,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEvC,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,WAAW,GAAGR,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9B,MAAMQ,QAAQ,GAAGD,WAAW,GAAGT,iBAAiB;MAEhD,IAAIU,QAAQ,GAAG,GAAG,IAAIZ,UAAU,EAAE;QAChC,OAAO,CAAE;MACX;MAEAE,iBAAiB,GAAGS,WAAW;MAC/BH,OAAO,CAACK,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACQ,MAAM,CAAC;;MAE3D;MACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACrDF,YAAY,CAACF,KAAK,GAAGP,MAAM,CAACO,KAAK;MACjCE,YAAY,CAACD,MAAM,GAAGR,MAAM,CAACQ,MAAM;MACnC,MAAMI,aAAa,GAAGH,YAAY,CAACP,UAAU,CAAC,IAAI,CAAC;MACnDU,aAAa,CAACN,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEW,YAAY,CAACF,KAAK,EAAEE,YAAY,CAACD,MAAM,CAAC;MAE7EC,YAAY,CAACI,MAAM,CAAC,MAAOC,IAAI,IAAK;QAClC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,EAAE,WAAW,CAAC;QAE3C,IAAI;UACFpB,aAAa,CAAC,IAAI,CAAC;UACnB,MAAMwB,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;YAC1EK,YAAY,EAAE;UAChB,CAAC,CAAC;UAEF,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;UACvBD,GAAG,CAACE,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,QAAQ,CAACQ,IAAI,CAAC;UAC5CL,GAAG,CAACM,MAAM,GAAG,MAAM;YACjB1B,OAAO,CAAC2B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE5B,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAE;YACvDP,OAAO,CAACK,SAAS,CAACe,GAAG,EAAE,CAAC,EAAE,CAAC,EAAErB,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAE;;YAE5D;YACAhB,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAE;UAC9B,CAAC;QACH,CAAC,CAAC,OAAOqC,GAAG,EAAE;UACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;UAC7CrC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAE;QAC/B,CAAC,SAAS;UACRE,aAAa,CAAC,KAAK,CAAC;QACtB;MACF,CAAC,EAAE,YAAY,CAAC;IAClB,CAAC;IAED,MAAMsC,UAAU,GAAGC,WAAW,CAAC9B,YAAY,EAAE,GAAG,CAAC,CAAC,CAAE;;IAEpD,OAAO,MAAM+B,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACvC,UAAU,CAAC,CAAC;EAEhB,oBACEP,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAOkD,GAAG,EAAE/C,QAAS;MAACgD,QAAQ;MAAC9B,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChEvD,OAAA;MAAQkD,GAAG,EAAE9C,SAAU;MAACiB,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EAGzDlD,gBAAgB,iBAAIL,OAAA;MAAGwD,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAT,QAAA,EAAC;IAAqB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5F,CAAC;AAEV,CAAC;AAACrD,EAAA,CAxEID,UAAU;AAAA0D,EAAA,GAAV1D,UAAU;AA0EhB,eAAeA,UAAU;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}